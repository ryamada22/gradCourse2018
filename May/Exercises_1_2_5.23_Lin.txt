
R version 3.5.0 (2018-04-23) -- "Joy in Playing"
Copyright (C) 2018 The R Foundation for Statistical Computing
Platform: x86_64-apple-darwin15.6.0 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.
#Exercises
#Here we will test some of the basics of R data manipulation which you should know or should have learned by following the tutorials above. You will need to have the file femaleMiceWeights.csv in your working directory. As we showed above, one way to do this is by using the downloader package:
#library(downloader)
#url <- "https://raw.githubusercontent.com/genomicsclass/dagdata/master/inst/extd\
ate/femaleMiceWeights.csv"
#filename <- "femaleMiceWeights.csv"
#download(url, destfile=filename)
#1. Read in the file femaleMiceWeights.csv and report the body weight of the mouse in the exact name of the column containing the weights.
#2. The[and]symbolscanbeusedtoextractspecificrowsandspecificcolumnsofthetable. What is the entry in the 12th row and second column?
#3. You should have learned how to use the $ character to extract a column from a table and return it as a vector. Use $ to extract the weight column and report the weight of the mouse in the 11th row.
#4. The length function returns the number of elements in a vector. How many mice are included in our dataset?
#5. To create a vector with the numbers 3 to 7, we can use seq(3,7) or, because they are consecutive, 3:7. View the data and determine what rows are associated with the high fat or hf diet. Then use the mean function to compute the average weight of these mice.
#6. One of the functions we will be using often is sample. Read the help file for sample using ?sample. Now take a random sample of size 1 from the numbers 13 to 24 and report back the weight of the mouse represented by that row. Make sure to type set.seed(1) to ensure that everybody gets the same answer.
> getwd()
[1] "/Users/linshuhao/Desktop/csv"
> dat <- read.csv("femaleMiceWeights.csv")
> summary(dat)
   Diet      Bodyweight   
 chow:12   Min.   :19.79  
 hf  :12   1st Qu.:22.36  
           Median :25.16  
           Mean   :25.32  
           3rd Qu.:28.14  
           Max.   :34.02  
> head(dat)
  Diet Bodyweight
1 chow      21.51
2 chow      28.14
3 chow      24.04
4 chow      23.45
5 chow      23.68
6 chow      19.79
> list.files(dat)
Error in list.files(dat) : invalid 'path' argument
> dat
   Diet Bodyweight
1  chow      21.51
2  chow      28.14
3  chow      24.04
4  chow      23.45
5  chow      23.68
6  chow      19.79
7  chow      28.40
8  chow      20.98
9  chow      22.51
10 chow      20.10
11 chow      26.91
12 chow      26.25
13   hf      25.71
14   hf      26.37
15   hf      22.80
16   hf      25.34
17   hf      24.97
18   hf      28.14
19   hf      29.58
20   hf      30.92
21   hf      34.02
22   hf      21.90
23   hf      31.53
24   hf      20.73
> dat[12]
Error in `[.data.frame`(dat, 12) : undefined columns selected
> dat
   Diet Bodyweight
1  chow      21.51
2  chow      28.14
3  chow      24.04
4  chow      23.45
5  chow      23.68
6  chow      19.79
7  chow      28.40
8  chow      20.98
9  chow      22.51
10 chow      20.10
11 chow      26.91
12 chow      26.25
13   hf      25.71
14   hf      26.37
15   hf      22.80
16   hf      25.34
17   hf      24.97
18   hf      28.14
19   hf      29.58
20   hf      30.92
21   hf      34.02
22   hf      21.90
23   hf      31.53
24   hf      20.73
> 12
[1] 12
> head(dat,1:12)
Error in head.data.frame(dat, 1:12) : length(n) == 1L is not TRUE
> head(dat,12)
   Diet Bodyweight
1  chow      21.51
2  chow      28.14
3  chow      24.04
4  chow      23.45
5  chow      23.68
6  chow      19.79
7  chow      28.40
8  chow      20.98
9  chow      22.51
10 chow      20.10
11 chow      26.91
12 chow      26.25
> [2,12]
Error: unexpected '[' in "["
> selcet[2,12]
Error: object 'selcet' not found
> dat(row = 12, col = 2)
Error in dat(row = 12, col = 2) : could not find function "dat"
> dat[row = 12, col = 2]
Error in `[.data.frame`(dat, row = 12, col = 2) : 
  unused arguments (row = 12, col = 2)
> dat[12]
Error in `[.data.frame`(dat, 12) : undefined columns selected
> dat[12,]
   Diet Bodyweight
12 chow      26.25
> dat[12,2]
[1] 26.25
> dat$Bodyweight[11,]
Error in dat$Bodyweight[11, ] : incorrect number of dimensions
> dat$Bodyweight[11:]
Error: unexpected ']' in "dat$Bodyweight[11:]"
> dat$Bodyweight[11,1]
Error in dat$Bodyweight[11, 1] : incorrect number of dimensions
> ?$
Error: unexpected '$' in "?$"
> dat$Bodyweight
 [1] 21.51 28.14 24.04 23.45 23.68 19.79 28.40 20.98 22.51 20.10 26.91 26.25 25.71 26.37 22.80 25.34 24.97 28.14 29.58 30.92 34.02
[22] 21.90 31.53 20.73
> 
> dat$Bodyweight(1:11)
Error: attempt to apply non-function
> dat$Bodyweight(length())
Error: attempt to apply non-function
> dat$Bodyweight(length(11))
Error: attempt to apply non-function
> dat$Bodyweight(length = 11)
Error: attempt to apply non-function
> dat$Bodyweight[c(1,11)]
[1] 21.51 26.91
> dat$Bodyweight[c(11)]
[1] 26.91
> length(dat$Diet)
[1] 24
> mean(dat$Bodyweight, dat$Diet("hf"))
Error in mean.default(dat$Bodyweight, dat$Diet("hf")) : 
  attempt to apply non-function
> ?mean
> mean(dat, dat = "hf")
[1] NA
Warning message:
In mean.default(dat, dat = "hf") :
  argument is not numeric or logical: returning NA
> 
> mean(dat$Bodyweight, dat$Diet="hf")
Error: unexpected '=' in "mean(dat$Bodyweight, dat$Diet="
> mean(dat$Bodyweight)
[1] 25.32375
> seq(3,5)
[1] 3 4 5
> dat[which.mean]
Error in `[.data.frame`(dat, which.mean) : object 'which.mean' not found
> dat[mean("hf")]
Error in `[.data.frame`(dat, mean("hf")) : undefined columns selected
In addition: Warning message:
In mean.default("hf") : argument is not numeric or logical: returning NA
> dat$Bodyweight[mean()]
Error in mean.default() : argument "x" is missing, with no default
> ?seq
> seq.int(from = "hf")
[1] 1
> seq.int(from = "hf", to "hf")
Error: unexpected string constant in "seq.int(from = "hf", to "hf""
> seq.int("hf")
[1] 1
> dat(Diet = "hf")
Error in dat(Diet = "hf") : could not find function "dat"
> length(Diet)
Error: object 'Diet' not found
> length("hf")
[1] 1
> dat
   Diet Bodyweight
1  chow      21.51
2  chow      28.14
3  chow      24.04
4  chow      23.45
5  chow      23.68
6  chow      19.79
7  chow      28.40
8  chow      20.98
9  chow      22.51
10 chow      20.10
11 chow      26.91
12 chow      26.25
13   hf      25.71
14   hf      26.37
15   hf      22.80
16   hf      25.34
17   hf      24.97
18   hf      28.14
19   hf      29.58
20   hf      30.92
21   hf      34.02
22   hf      21.90
23   hf      31.53
24   hf      20.73
> seq_along(dat)
[1] 1 2
> seq_along(dat$Diet)
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24
> Diet = hf
Error: object 'hf' not found
> Diet = "hf"
> 
> rownames(x)
Error in rownames(x) : object 'x' not found
> rownames(dat)
 [1] "1"  "2"  "3"  "4"  "5"  "6"  "7"  "8"  "9"  "10" "11" "12" "13" "14" "15" "16" "17" "18" "19" "20" "21" "22" "23" "24"
> row.names(Diet)
> rownames(Diet)
NULL
> colMeans(Bodyweight)
Error in is.data.frame(x) : object 'Bodyweight' not found
> colMeans(dat)
Error in colMeans(dat) : 'x' must be numeric
> seq(dat)
[1] 1 2
> dat$Diet
 [1] chow chow chow chow chow chow chow chow chow chow chow chow hf   hf   hf   hf   hf   hf   hf   hf   hf   hf   hf   hf  
Levels: chow hf
> mean(dat$Bodyweight)
[1] 25.32375
> ?mean
> mean(dat$Bodyweight[1])
[1] 21.51
> ?length
> length(dat$Diet = "hf")
Error: unexpected '=' in "length(dat$Diet ="
> length(dat$Diet)
[1] 24
> dat[dat$Diet = "hf"]
Error: unexpected '=' in "dat[dat$Diet ="
> dat[dat$Diet = hf]
Error: unexpected '=' in "dat[dat$Diet ="
> dat[dat$Diet <- hf]
Error in `[.data.frame`(dat, dat$Diet <- hf) : object 'hf' not found
> dat[dat$Diet == hf]
Error in `[.data.frame`(dat, dat$Diet == hf) : object 'hf' not found
> dat[dat$Diet == "hf"]
Error in `[.data.frame`(dat, dat$Diet == "hf") : 
  undefined columns selected
> dat[dat$Diet == "hf",]
   Diet Bodyweight
13   hf      25.71
14   hf      26.37
15   hf      22.80
16   hf      25.34
17   hf      24.97
18   hf      28.14
19   hf      29.58
20   hf      30.92
21   hf      34.02
22   hf      21.90
23   hf      31.53
24   hf      20.73
> mean(dat$Bodyweight, dat[dat$Diet == "hf"])
Error in `[.data.frame`(dat, dat$Diet == "hf") : 
  undefined columns selected
> mean(dat$Bodyweight[dat$Diet == "hf",])
Error in dat$Bodyweight[dat$Diet == "hf", ] : 
  incorrect number of dimensions
> mean(dat$Bodyweight, dat[dat$Diet == "hf",])
Error in mean.default(dat$Bodyweight, dat[dat$Diet == "hf", ]) : 
  'trim' must be numeric of length one
> mean(dat[dat$Diet == "hf",])
[1] NA
Warning message:
In mean.default(dat[dat$Diet == "hf", ]) :
  argument is not numeric or logical: returning NA
> hf = dat[dat$Diet == "hf",]
> hf$Bodyweight
 [1] 25.71 26.37 22.80 25.34 24.97 28.14 29.58 30.92 34.02 21.90 31.53 20.73
> mean(hf$Bodyweight)
[1] 26.83417
> ?sample
> sample(dat, size = 1, [13:24])
Error: unexpected '[' in "sample(dat, size = 1, ["
> sample(c(13:24))
 [1] 24 13 20 23 16 19 17 21 15 18 22 14
> sample(c(13:24), size = 1)
[1] 14
> dat$Bodyweight[c(sample(c(13:24)))]
 [1] 30.92 25.71 20.73 22.80 31.53 28.14 26.37 29.58 34.02 21.90 24.97 25.34
> dat$Bodyweight[c(sample(c(13:24), size = 1))]
[1] 25.71
> dat$Bodyweight[c(sample(c(13:24), size = 1))]
[1] 20.73
> dat$Bodyweight[c(sample(c(13:24), size = 1))]
[1] 26.37
> dat$Bodyweight[c(sample(c(13:24), size = 1))]
[1] 30.92
> dat$Bodyweight[c(sample(c(13:24), size = 1))]
[1] 21.9
> dat$Bodyweight[c(sample(c(13:24), size = 1))]
[1] 29.58
> dat$Bodyweight[c(sample(c(13:24), size = 1))]
[1] 21.9
> dat$Bodyweight[c(sample(c(13:24), size = 1))]
[1] 25.71
> set.seed(1)
> dat$Bodyweight[c(sample(c(13:24), size = 1))]
[1] 25.34
> ?set.seed
> dat$Bodyweight[c(sample(c(13:24), size = 1))]
[1] 24.97
> dat[dat$Diet == "hf",dat$Bodyweight == "21.9"]
NULL
> dat
   Diet Bodyweight
1  chow      21.51
2  chow      28.14
3  chow      24.04
4  chow      23.45
5  chow      23.68
6  chow      19.79
7  chow      28.40
8  chow      20.98
9  chow      22.51
10 chow      20.10
11 chow      26.91
12 chow      26.25
13   hf      25.71
14   hf      26.37
15   hf      22.80
16   hf      25.34
17   hf      24.97
18   hf      28.14
19   hf      29.58
20   hf      30.92
21   hf      34.02
22   hf      21.90
23   hf      31.53
24   hf      20.73
> dat[dat$Diet == "hf",dat$Bodyweight == "21.90"]
data frame with 0 columns and 12 rows
> dat[dat$Diet == "hf",]
   Diet Bodyweight
13   hf      25.71
14   hf      26.37
15   hf      22.80
16   hf      25.34
17   hf      24.97
18   hf      28.14
19   hf      29.58
20   hf      30.92
21   hf      34.02
22   hf      21.90
23   hf      31.53
24   hf      20.73
> dat[dat$Bodyweight == "21.9",]
   Diet Bodyweight
22   hf       21.9
> dat[which(dat$Diet=="hf"&dat$Bodyweight==21.9)]
Error in `[.data.frame`(dat, which(dat$Diet == "hf" & dat$Bodyweight ==  : 
  undefined columns selected
> dat[which(dat$Diet=="hf"&dat$Bodyweight=="21.9")]
Error in `[.data.frame`(dat, which(dat$Diet == "hf" & dat$Bodyweight ==  : 
  undefined columns selected
> dat[which(dat$Diet=="hf"&dat$Bodyweight=="21.90")]
data frame with 0 columns and 24 rows
> 
> dat[which(dat$Diet=="hf"&dat$Bodyweight=="21.90"),]
[1] Diet       Bodyweight
<0 rows> (or 0-length row.names)
> dat[which(dat$Diet=="hf"&dat$Bodyweight=="21.9"),]
   Diet Bodyweight
22   hf       21.9

#Exercises
#For these exercises, we will use a new dataset related to mammalian sleep. This data is described here. Download the CSV file from this location:
We are going to read in this data, then test your knowledge of they key dplyr functions select and filter. We are also going to review two different classes: data frames and vectors.
#1. Readinthemsleep_ggplot2.csvfilewiththefunctionread.csvandusethefunctionclass to determine what type of object is returned.
#2. Nowusethefilterfunctiontoselectonlytheprimates.Howmanyanimalsinthetableare primates? Hint: the nrow function gives you the number of rows of a data frame or matrix.
#3. Whatistheclassoftheobjectyouobtainaftersubsettingthetabletoonlyincludeprimates?
#4. Nowusetheselectfunctiontoextractthesleep(total)fortheprimates.Whatclassisthis
object? Hint: use %>% to pipe the results of the filter function to select.
#5. Now we want to calculate the average amount of sleep for primates (the average of the numbers computed above). One challenge is that the mean function requires a vector so, if we simply apply it to the output above, we get an error. Look at the help file for unlist and
use it to compute the desired average.
#6. Forthelastexercise,wecouldalsousethedplyrsummarizefunction.Wehavenotintroduced
this function, but you can read the help file and repeat exercise 5, this time using just filter and summarize to get the answer.

> install.packages("dplyr")
also installing the dependencies ‘utf8’, ‘bindr’, ‘pillar’, ‘purrr’, ‘bindrcpp’, ‘pkgconfig’, ‘Rcpp’, ‘tibble’, ‘tidyselect’, ‘BH’, ‘plogr’

trying URL 'https://cran.rstudio.com/bin/macosx/el-capitan/contrib/3.5/utf8_1.1.3.tgz'
Content type 'application/x-gzip' length 194136 bytes (189 KB)
==================================================
downloaded 189 KB

trying URL 'https://cran.rstudio.com/bin/macosx/el-capitan/contrib/3.5/bindr_0.1.1.tgz'
Content type 'application/x-gzip' length 15250 bytes (14 KB)
==================================================
downloaded 14 KB

trying URL 'https://cran.rstudio.com/bin/macosx/el-capitan/contrib/3.5/pillar_1.2.2.tgz'
Content type 'application/x-gzip' length 145629 bytes (142 KB)
==================================================
downloaded 142 KB

trying URL 'https://cran.rstudio.com/bin/macosx/el-capitan/contrib/3.5/purrr_0.2.4.tgz'
Content type 'application/x-gzip' length 286078 bytes (279 KB)
==================================================
downloaded 279 KB

trying URL 'https://cran.rstudio.com/bin/macosx/el-capitan/contrib/3.5/bindrcpp_0.2.2.tgz'
Content type 'application/x-gzip' length 380736 bytes (371 KB)
==================================================
downloaded 371 KB

trying URL 'https://cran.rstudio.com/bin/macosx/el-capitan/contrib/3.5/pkgconfig_2.0.1.tgz'
Content type 'application/x-gzip' length 17953 bytes (17 KB)
==================================================
downloaded 17 KB

trying URL 'https://cran.rstudio.com/bin/macosx/el-capitan/contrib/3.5/Rcpp_0.12.17.tgz'
Content type 'application/x-gzip' length 4560707 bytes (4.3 MB)
==================================================
downloaded 4.3 MB

trying URL 'https://cran.rstudio.com/bin/macosx/el-capitan/contrib/3.5/tibble_1.4.2.tgz'
Content type 'application/x-gzip' length 230077 bytes (224 KB)
==================================================
downloaded 224 KB

trying URL 'https://cran.rstudio.com/bin/macosx/el-capitan/contrib/3.5/tidyselect_0.2.4.tgz'
Content type 'application/x-gzip' length 299414 bytes (292 KB)
==================================================
downloaded 292 KB

trying URL 'https://cran.rstudio.com/bin/macosx/el-capitan/contrib/3.5/BH_1.66.0-1.tgz'
Content type 'application/x-gzip' length 10959937 bytes (10.5 MB)
==================================================
downloaded 10.5 MB

trying URL 'https://cran.rstudio.com/bin/macosx/el-capitan/contrib/3.5/plogr_0.2.0.tgz'
Content type 'application/x-gzip' length 13067 bytes (12 KB)
==================================================
downloaded 12 KB

trying URL 'https://cran.rstudio.com/bin/macosx/el-capitan/contrib/3.5/dplyr_0.7.5.tgz'
Content type 'application/x-gzip' length 5666447 bytes (5.4 MB)
==================================================
downloaded 5.4 MB


The downloaded binary packages are in
	/var/folders/yl/73zshhnj2h5grcvns5qvf0kr0000gn/T//RtmpXTzonJ/downloaded_packages
> View(dat)
> head(dat)
  Diet Bodyweight
1 chow      21.51
2 chow      28.14
3 chow      24.04
4 chow      23.45
5 chow      23.68
6 chow      19.79
> library(dplyr)

Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

> chow <- filter(dat, Diet == "chow")
> head(chow)
  Diet Bodyweight
1 chow      21.51
2 chow      28.14
3 chow      24.04
4 chow      23.45
5 chow      23.68
6 chow      19.79
> chowvals <- select(chow, Bodyweight)
> head(chowvals)
  Bodyweight
1      21.51
2      28.14
3      24.04
4      23.45
5      23.68
6      19.79
> chowVals <- filter(dat, Diet == "chow") %>% select(Bodyweight)
> class(dat)
[1] "data.frame"
> class(chowVals)
[1] "data.frame"
> chowVals <- filter(dat, Diet == "chow") %>% select(Bodyweight) %>% unlist
> class(chowVals)
[1] "numeric"
> read.csv(mslleep)
Error in read.table(file = file, header = header, sep = sep, quote = quote,  : 
  object 'mslleep' not found
> 
> 
> ?read.csv
> aa <- read.csv(msleep_ggplot2.csv)
Error in read.table(file = file, header = header, sep = sep, quote = quote,  : 
  object 'msleep_ggplot2.csv' not found
> aa <- read.csv(msleep_ggplot2.csv)
Error in read.table(file = file, header = header, sep = sep, quote = quote,  : 
  object 'msleep_ggplot2.csv' not found
> aa <- read.csv("msleep_ggplot2.csv")
> class(aa)
[1] "data.frame"
> View(aa)
> filter(aa, order == "primates")
 [1] name         genus        vore         order        conservation sleep_total  sleep_rem    sleep_cycle  awake        brainwt     
[11] bodywt      
<0 rows> (or 0-length row.names)
> nrow(filter(aa, order == "primates"))
[1] 0
> bb <- filter(aa, order == "primates")
> nrow(bb)
[1] 0
> ?nrow
> class(bb)
[1] "data.frame"
> bb
 [1] name         genus        vore         order        conservation sleep_total  sleep_rem    sleep_cycle  awake        brainwt     
[11] bodywt      
<0 rows> (or 0-length row.names)
> bb <- filter(aa, order == "Primates")
> bb
              name         genus  vore    order conservation sleep_total sleep_rem sleep_cycle awake brainwt bodywt
1       Owl monkey         Aotus  omni Primates         <NA>        17.0       1.8          NA   7.0  0.0155  0.480
2           Grivet Cercopithecus  omni Primates           lc        10.0       0.7          NA  14.0      NA  4.750
3     Patas monkey  Erythrocebus  omni Primates           lc        10.9       1.1          NA  13.1  0.1150 10.000
4           Galago        Galago  omni Primates         <NA>         9.8       1.1   0.5500000  14.2  0.0050  0.200
5            Human          Homo  omni Primates         <NA>         8.0       1.9   1.5000000  16.0  1.3200 62.000
6   Mongoose lemur         Lemur herbi Primates           vu         9.5       0.9          NA  14.5      NA  1.670
7          Macaque        Macaca  omni Primates         <NA>        10.1       1.2   0.7500000  13.9  0.1790  6.800
8       Slow loris     Nyctibeus carni Primates         <NA>        11.0        NA          NA  13.0  0.0125  1.400
9       Chimpanzee           Pan  omni Primates         <NA>         9.7       1.4   1.4166667  14.3  0.4400 52.200
10          Baboon         Papio  omni Primates         <NA>         9.4       1.0   0.6666667  14.6  0.1800 25.235
11           Potto  Perodicticus  omni Primates           lc        11.0        NA          NA  13.0      NA  1.100
12 Squirrel monkey       Saimiri  omni Primates         <NA>         9.6       1.4          NA  14.4  0.0200  0.743
> nrow(bb)
[1] 12
> class(bb)
[1] "data.frame"
> cc <- filter(aa, order == "Primates") %>% select(sleep_total)
> cc
   sleep_total
1         17.0
2         10.0
3         10.9
4          9.8
5          8.0
6          9.5
7         10.1
8         11.0
9          9.7
10         9.4
11        11.0
12         9.6
> class(cc)
[1] "data.frame"
> dd <- filter(aa, order == "Primates") %>% select(sleep_total) %>%
+ unlist
> mean(dd)
[1] 10.5
> ?summarise
> summarise(aa, filter(aa, order == "Primates"))
Error in summarise_impl(.data, dots) : 
  Column `filter(aa, order == "Primates")` must be length 1 (a summary value), not 11
> group_by(aa, order
+ )
# A tibble: 83 x 11
# Groups:   order [19]
   name                       genus       vore  order        conservation sleep_total sleep_rem sleep_cycle awake  brainwt  bodywt
   <fct>                      <fct>       <fct> <fct>        <fct>              <dbl>     <dbl>       <dbl> <dbl>    <dbl>   <dbl>
 1 Cheetah                    Acinonyx    carni Carnivora    lc                  12.1      NA        NA      11.9 NA        50    
 2 Owl monkey                 Aotus       omni  Primates     NA                  17         1.8      NA       7    0.0155    0.48 
 3 Mountain beaver            Aplodontia  herbi Rodentia     nt                  14.4       2.4      NA       9.6 NA         1.35 
 4 Greater short-tailed shrew Blarina     omni  Soricomorpha lc                  14.9       2.3       0.133   9.1  0.00029   0.019
 5 Cow                        Bos         herbi Artiodactyla domesticated         4         0.7       0.667  20    0.423   600    
 6 Three-toed sloth           Bradypus    herbi Pilosa       NA                  14.4       2.2       0.767   9.6 NA         3.85 
 7 Northern fur seal          Callorhinus carni Carnivora    vu                   8.7       1.4       0.383  15.3 NA        20.5  
 8 Vesper mouse               Calomys     NA    Rodentia     NA                   7        NA        NA      17   NA         0.045
 9 Dog                        Canis       carni Carnivora    domesticated        10.1       2.9       0.333  13.9  0.07     14    
10 Roe deer                   Capreolus   herbi Artiodactyla lc                   3        NA        NA      21    0.0982   14.8  
# ... with 73 more rows
> summarise(filter(aa, order == "Primates"), sleep_tota, mean())
Error in summarise_impl(.data, dots) : 
  Evaluation error: object 'sleep_tota' not found.
> summarise(filter(aa, order == "Primates"), sleep_total, mean())
Error in summarise_impl(.data, dots) : 
  Column `sleep_total` must be length 1 (a summary value), not 12
> summarise(mean(filter(aa, order == "Primates")))
Error in UseMethod("summarise_") : 
  no applicable method for 'summarise_' applied to an object of class "c('double', 'numeric')"
In addition: Warning message:
In mean.default(filter(aa, order == "Primates")) :
  argument is not numeric or logical: returning NA
> filter(aa, order == "Primates") %>% summarise(mean(sleep_total))
  mean(sleep_total)
1              10.5
> sink("homework_5.23_Lin.txt")
> savehistory("homework_5.23_Lin.txt")
> ?sink